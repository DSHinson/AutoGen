using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TestAuoGen.Api.models_for_auto_gen;

namespace TestAutoGen.Dal
{
    
    public class {{ClassName}}Repo(DalBase dalBase)
    {
        private readonly DalBase _baseRepo = dalBase ?? throw new ArgumentNullException(nameof(dalBase));

        public List<{{ClassName}}> GetAll{{ClassName}}s()
        {
            // Get all {{ClassName}}s
            string selectAllSql = "SELECT * FROM {{ClassName}}s";
            var {{ClassName}}s = _baseRepo.Query<{{ClassName}}>(selectAllSql).ToList();
            return {{ClassName}}s;
        }

        public {{ClassName}}? Get{{ClassName}}ById()
        {
            // Get {{ClassName}} by Id
            string selectByIdSql = "SELECT * FROM {{ClassName}}s WHERE Id = @Id";
            var selectByIdParameters = new { Id = 1 };
            var {{ClassName}}ById = _baseRepo.FirstOrDefault<{{ClassName}}>(selectByIdSql, selectByIdParameters);
            return {{ClassName}}ById;
        }

        public {{ClassName}}? Update{{ClassName}}({{ClassName}} {{ClassName}})
        {
            // Update
            string Sql = _baseRepo.GenerateUpdateSql<{{ClassName}}>({{ClassName}});
            var {{ClassName}}ById = _baseRepo.FirstOrDefault<{{ClassName}}>(Sql, {{ClassName}});
            return {{ClassName}}ById;
        }

        public {{ClassName}}? Create{{ClassName}}({{ClassName}} {{ClassName}})
        {
            // Create
            string Sql = _baseRepo.GenerateInsertSql<{{ClassName}}>({{ClassName}});
            var {{ClassName}}ById = _baseRepo.FirstOrDefault<{{ClassName}}>(Sql, {{ClassName}});
            return {{ClassName}}ById;
        }

        public void Delete{{ClassName}}({{ClassName}} {{ClassName}})
        {
            //Delete {{ClassName}}s
            string deleteSql = "DELETE FROM {{ClassName}}s WHERE Id = @Id";
            _baseRepo.Execute(deleteSql, {{ClassName}});
        }
    }
}
